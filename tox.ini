# ******************************************************************************
#
# django-loader, a configuration and secret loader for Django
#
# Copyright 2021-2024 Jeremy A Gray <gray@flyquackswim.com>.
#
# SPDX-License-Identifier: MIT
#
# ******************************************************************************

[tox]

envlist =
  clean-coverage
  py{310,311,312}-django{42,50}
  report
  lint

isolated_build = True
skip_missing_interpreters = True
requires =
    pip>=20.0

[testenv]

description = Test supported environments.
deps =
  django42: Django>=4.2,<5
  django50: Django>=5.0,<5.1
  pyfakefs
  pytest
  pytest-django
commands =
  pytest --doctest-modules --doctest-glob='*.rst' -vvvv

[testenv:py312-django50]

description = Generate test coverage data.
deps =
  django50: Django>=5.0,<5.1
  pyfakefs
  pytest
  pytest-cov
  pytest-django
commands =
  pytest --doctest-modules --doctest-glob='*.rst' -vvvv --cov loader --cov fake --cov-report term --cov-report html

[testenv:build]

description = Build package.
deps =
  build
skip_install = true
commands =
  python3 -m build

[testenv:build-docs]

description = Generate documentation with sphinx.
deps =
  Sphinx>=7
commands =
  sphinx-build -M clean docs docs/_build/html
  sphinx-build -b html -nW --keep-going -d docs/_build/.doctrees docs docs/_build/html
  sphinx-build -b html -nW --keep-going -d docs/_build/.doctrees docs docs/_build/html

[testenv:clean]

description = Clean after builds.
skip_install = true
allowlist_externals =
  rm
commands =
  rm -rf build
  rm -rf dist
  rm -rf django_loader.egg-info

[testenv:clean-all]

description = Clean everything.
deps =
  coverage[TOML]
skip_install = true
allowlist_externals =
  rm
commands =
  rm -rf build
  rm -rf dist
  rm -rf django_loader.egg-info
  coverage erase

[testenv:clean-coverage]

description = Erase previous test coverage data.
deps =
  coverage[TOML]
skip_install = true
commands =
  coverage erase

[testenv:lint]

description = Run all linting checks.
skip_install = True
deps =
  bandit[toml]
  black
  flake8
  flake8-docstrings
  isort
commands =
  bandit --config pyproject.toml -r fake loader
  black --check --diff fake loader tests
  flake8 fake loader tests
  isort --check --df fake loader tests

[testenv:lint-bandit]

description = Check for security problems.
skip_install = True
deps =
  bandit[toml]
commands =
  bandit --config pyproject.toml -r fake loader

[testenv:lint-black]

description = Format python code with black.
skip_install = True
deps =
  black
commands =
  black --check --diff fake loader tests

[testenv:lint-dead]

description = Check for dead code.
skip_install = True
deps =
  dead
commands =
  dead --exclude '(migrations|settings\.py)' --tests 'test_.*\.py'

[testenv:lint-fix]

description = Fix all automatically fixable linting issues.
skip_install = True
deps =
  black
  isort
commands =
  black fake loader tests
  isort fake loader tests

[testenv:lint-flake8]

description = Run flake8 checks.
skip_install = True
deps =
  flake8
  flake8-docstrings
commands =
  flake8 fake loader tests

[testenv:lint-isort]

description = Format module imports.
skip_install = True
deps =
  isort
commands =
  isort --check --df fake loader tests

[testenv:report]

description = Generate current test coverage report.
deps = coverage[TOML]
skip_install = true
commands =
  coverage report
  coverage html

[testenv:upload]

description = Upload packages to PyPI.
deps = twine
skip_install = true
commands =
  python3 -m twine upload --verbose dist/*

[testenv:upload-test]

description = Test upload of packages to PyPI.
deps = twine
skip_install = true
commands =
  python3 -m twine upload --verbose --repository testpypi dist/*
